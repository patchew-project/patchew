- hosts: servers
  vars_prompt:
    - name: instance_name
      prompt: "Instance name of the webserver"
      default: patchew-server
      private: no
    - name: container_dir
      prompt: "The base directory for the container"
      default: /data
      private: no
    - name: "podman_network"
      prompt: "The podman network to use for the container (empty = none)"
      default: ""
      private: no
    - name: db_host
      prompt: "Host for PostgreSQL database (empty = SQLite)"
      default: ""
      private: no
    - name: superuser_name
      prompt: "Admin account to create (optional)"
      default: ""
      private: no
    - name: superuser_pass
      prompt: "Admin password (optional)"
      default: "adminpass"
      private: yes
  vars:
    base_dir: "{{ container_dir }}/{{ instance_name }}"
    src_dir: "{{ base_dir }}/src"
    data_dir: "{{ base_dir }}/data"
    podman_run_args: "{{ '-e PATCHEW_DB_PORT_5432_TCP_ADDR=' if db_host != '' else '' }}{{ db_host }}"
  tasks:
    - name: Create data dir
      file:
        path: "{{ data_dir }}"
        state: directory
    - name: Configuring SELinux file context
      sefcontext:
        setype: httpd_var_run_t
        target: "{{ data_dir }}/nginx.sock"
      become: true
    - import_tasks: tasks/podman-deploy.yml
      vars:
        instance_role: server
    - name: Check whether a preexisting socket exists
      stat:
        path: "{{ data_dir }}/nginx.sock"
      register: nginx_sock
    - name: Apply new SELinux file context to filesystem
      command: "restorecon -v {{ data_dir }}/nginx.sock"
      become: true
      when: nginx_sock.stat.exists
    - name: Create superuser
      when: superuser_name != ""
      shell: |
        podman exec -i {{ instance_name }} bash -c "
        cd /opt/patchew &&
        . venv/bin/activate &&
        ./manage.py migrate &&
        (
        echo 'from django.contrib.auth.models import User;'
        echo 'if not User.objects.filter(username=\"{{ superuser_name }}\").first():'
        echo '    User.objects.create_superuser(\"{{ superuser_name }}\",'
        echo '                                  \"{{ superuser_name }}@example.com\",'
        echo '                                  \"{{ superuser_pass }}\")'
        ) | ./manage.py shell
        "
